/*
 * This is a basic setup using the DHT11, I just needed to get it started, I recommend at least using a DHT22 or BME280 sensor.
 * The DHT11 is =/- 2 degrees and +/- 5% rH in its output. 
 * install the correct libraries and header files, although this is not pulling data directly from the internal algorithm you still need
 * to pre-heat and wake the sensor up.
 *
 *
 */

  /**
   * Gas type:
   * MICS-4514 You can get all gas concentration
   * MICS-5524 You can get the concentration of CH4, C2H5OH, H2, NH3, CO
   * MICS-2714 You can get the concentration of NO2
   *   CO       = 0x01  (Carbon Monoxide)  (1    - 1000)PPM
   *   CH4      = 0x02  (Methane)          (1000 - 25000)PPM
   *   C2H5OH   = 0x03  (Ethanol)          (10   - 500)PPM
   *   H2       = 0x06  (Hydrogen)         (1    - 1000)PPM
   *   NH3      = 0x08  (Ammonia)          (1    - 500)PPM
   *   NO2      = 0x0A  (Nitrogen Dioxide) (0.1  - 10)PPM
   *   
   *  
   *  Below is the data set from the Curve.
   *
   *  Gas           Rs    ppm    R0      ppm
   *
   *  H2S           0.7   0.1   0.6        0.5
   *  CO            0.0   0.1   0.01    1000 
   *  Ethanol       1.1   1.1   0.07     100 
   *  Hydrogen      0.8   1.05  0.04     200
   *  Ammonia       1.0   1.0   0.04     250
   *   Methane      0.75  1300  0.5    10100  
   *  Propane       0.17  1300  0.065  10100  
   *  Iso-butane    0.075 1300  0.06   10100
   */

#include <Arduino.h>
// DHT11
#include <DFRobot_DHT11.h>
DFRobot_DHT11 DHT;
#define DHT11_PIN 11

#define CALIBRATION_TIME   3 
#define POWER_PIN 8
#include "DFRobot_MICS.h"
const int ADC_PIN = A0; // MICS-5524 connected to analog pin A0
float R0 = 1000; // Baseline resistance of the sensor in clean air in kOhms, adjust based on your calibration
DFRobot_MICS_ADC mics(/*adcPin*/ADC_PIN, /*powerPin*/POWER_PIN);

// Function to calculate gas concentration
float calculateConcentration(float sensorResistance, float Rs, float Rs_ppm, float R0_ppm) {
  return (sensorResistance - R0) * (Rs_ppm - R0_ppm) / (Rs - R0) + R0_ppm;
}

void setup() {
  Serial.begin(115200);
  while(!Serial);
  while(!mics.begin()){
    Serial.println("NO Deivces !");
    delay(1000);
  } Serial.println("Device connected successfully !");

/**
   * Gets the power mode of the sensor
   * The sensor is in sleep mode when power is on,so it needs to wake up the sensor. 
   * The data obtained in sleep mode is wrong
   */
  uint8_t mode = mics.getPowerState();
  if(mode == SLEEP_MODE){
    mics.wakeUpMode();
    Serial.println("wake up sensor success!");
  }else{
    Serial.println("The sensor is wake up mode");
  }

  /**
   * Do not touch the sensor probe when preheating the sensor.
   * Place the sensor in clean air.
   * The default calibration time is 3 minutes.
   */
  while(!mics.warmUpTime(CALIBRATION_TIME)){
    Serial.println("Please wait until the warm-up time is over!");
    delay(1000);
  }
}

void loop() {
  
  DHT.read(DHT11_PIN);
  // Read temperature and humidity from DHT22
  float temperature = DHT.temperature;
  float humidity = DHT.humidity;
  
  // Check if any reads failed and exit early (to try again).
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

// Data taken from charts(BASIC VERSION)
   
  float sensorVoltage = analogRead(ADC_PIN) * (5.0 / 1023.0);
  float sensorResistance = (5.0 - sensorVoltage) * 10 / sensorVoltage; // Assuming a 10kOhm series resistor
  
  float H2S_ppm = calculateConcentration(sensorResistance, 0.7, 0.1, 0.5);
  float CO_ppm = calculateConcentration(sensorResistance, 10.0, 0.1, 1000);
  float Ethanol_ppm = calculateConcentration(sensorResistance, 1.1, 1.1, 500);
  float Hydrogen_ppm = calculateConcentration(sensorResistance, 0.8,   1.05,  1000);
  float Ammonia_ppm = calculateConcentration(sensorResistance, 1.0,   1.0,   500);
  float Methane_ppm = calculateConcentration(sensorResistance, 0.75,  1300,  25000); 
  float Propane_ppm = calculateConcentration(sensorResistance, 0.17,  1300,  10100);  
  float Iso_butane_ppm = calculateConcentration(sensorResistance, 0.075, 1300,  10100);

  // gases here following the pattern above
  Serial.print("Temperature: ");
  Serial.print(DHT.temperature);  Serial.println(" Â°C"); 
  Serial.print("Humidity: ");
  Serial.print(DHT.humidity);     Serial.println(" %rH");
  Serial.println("-----------------------------------------");
  Serial.print("H2S ppm: ");
  Serial.println(H2S_ppm);
  Serial.print("CO ppm: ");
  Serial.println(CO_ppm);
  Serial.print("Ethanol ppm: ");
  Serial.println(Ethanol_ppm);
  Serial.print("Hydrogen ppm: ");
  Serial.println(Hydrogen_ppm);
  Serial.print("Ammonia ppm: ");
  Serial.println(Ammonia_ppm);
  Serial.print("Methane ppm: ");
  Serial.println(Methane_ppm);
  Serial.print("Propane ppm: ");
  Serial.println(Propane_ppm);
  Serial.print("Iso-butane ppm: ");
  Serial.println(Iso_butane_ppm);
  Serial.println("-----------------------------------------");  


  delay(5000); // Wait for 5 seconds between measurements
}
